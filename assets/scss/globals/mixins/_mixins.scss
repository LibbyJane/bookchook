// for elements that need to go full screen width
@mixin full-width {
    width: 100vw;
    position: relative;
    left: 50%;
    right: 50%;
    margin-left: -50vw;
    margin-right: -50vw;
}

@mixin hide {
    max-height: 0;
    opacity: 0;
    overflow: clip;
    pointer-events: none;
    transition: all var(--transition-speed) var(--transition-type-hide);

    input {
        transform: translateX(1000vw); // last pass injects some difficult to hide icons etc
    }
}

@mixin show {
    max-height: 2000vh;
    opacity: 1;
    overflow: visible;
    pointer-events: all;
    transition: all var(--transition-speed) var(--transition-type-show);

    input {
        transform: translateX(0);
    }
}

@mixin size($size) {
    height: $size;
    width: $size;
}

@mixin sr-only {
    border: 0;
    clip: rect(0 0 0 0);
    overflow: clip;
    position: absolute;
    height: 1px;
    width: 1px;
    margin: -1px;
    padding: 0;
}

// Media queries / breakpoints
@mixin breakpoint($breakpoint, $max-width: false) {
    @if map-has-key($breakpoints, $breakpoint) {
        @if ($max-width){
            $breakpointWidth: map-get($breakpoints, #{$breakpoint});

            @media (max-width: #{$breakpointWidth - 1px}) {
                @content;
            }
        }

        @else {
            @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
                @content;
            }
        }
    }

    @else {
        @warn "`#{$breakpoint}` could not be found in `$breakpoints` map.";
    }
}


:root {
    --sb-track-color: hsl(var(--c-background-hue), var(--c-background-sat), calc(var(--c-background-lum) - 5%));
    --sb-thumb-color: hsl(var(--c-background-hue), calc(var(--c-background-sat) - 20%), calc(var(--c-background-lum) - 20%));
    --sb-size: 16px;
    --sb-radius: 99em;
}

@mixin scrollbars($overflowX: hidden) {
    overflow-x: hidden;
    overflow-y: auto;

    &::-webkit-scrollbar {
        width: var(--sb-size);
        scrollbar-width: thin;
    }

    &::-webkit-scrollbar-track {
        background: var(--sb-track-color);
        // mix-blend-mode: multiply;
    }

    &::-webkit-scrollbar-thumb {
        background-color: var(--sb-thumb-color);
        border-radius: var(--sb-radius);
        border: 3px solid var(--sb-track-color);
    }

    @supports not selector(::-webkit-scrollbar) {
        scrollbar-color: var(--sb-thumb-color)
        var(--sb-track-color);
    }
}


// @mixin text-body {
//     font-family: var(--font-body-family, 'sans-serif');
//     font-size: var(--font-size-base) ;
//     letter-spacing: var(--letter-spacing);
//     line-height: calc(1 + 0.4 / max(1, var(--font-body-scale)));
// }

// @mixin text-heading {
//     font-family: var(--font-heading-family, 'sans-serif');
//     font-style: var(--font-heading-style);
//     font-weight: var(--font-heading-weight);
//     // letter-spacing: calc(var(--font-heading-scale) * 0.06rem);
//     color: rgb(var(--color-foreground));
//     letter-spacing: 0;
//     line-height: calc(1 + 0.3 / max(1, var(--font-heading-scale)));
//     word-break: break-word;
// }

@mixin disabled {
    &:not([disabled="false"]) {
        filter: grayscale(1);
        pointer-events: none;
        opacity: 0.4;
    }
}
